import tkinter as tk
from tkinter import ttk
from tkinter import filedialog, messagebox, Scrollbar, simpledialog
from collections import defaultdict
from keyauth import api, getchecksum
import base64
import re
import base64
from datetime import datetime, timedelta
import csv
import hashlib
import webbrowser
import os
import ttkthemes

format = '%d-%m-%Y %H:%M:%S'

def main():
    result = getchecksum()
    print(result)





keyauthapp = api(
    name = "BozzyTool",
    ownerid = "p40l2PVTY8",
    secret = "f9d3a3fe13390f471ae200b2890785d2b4285458e29f90996cc12bd904e2dd5e",
    version = "1.0",
    hash_to_check = getchecksum()
)

def validate_license_key(license_entry, main_frame, license_window, output_text):
    login = license_entry.get()
    json_data = keyauthapp.license(login)  # Call the license method
    print(json_data)
    
    try:
        keyauthapp.license(login) 
        success = True
    except Exception as e:
        print("KeyAuth error:", e)  
        success = False

    if json_data["success"]:  
        #messagebox.showinfo("Success", "License key validated")
        license_window.destroy()
        main_app.deiconify()
        notebook.select(main_frame)
        print("me", login)
    else:
        messagebox.showerror("Error", "Invalid license key")

def contains_phrase(stat, phrases, exact_match=False):
    for phrase in phrases:
        if exact_match:
            if stat.lower() == phrase.lower():
                return True
        else:
            if re.search(r'\b' + re.escape(phrase) + r'\b.*', stat, re.IGNORECASE):
                return True
    return False




def analyze_file(file_path, start_date_time):
    items = defaultdict(list)
    runes = defaultdict(int)
    keys = defaultdict(int)
    excluded_exact_matches = ["(Druid Only)", "(Amazon Only)", "(Necromancer Only)", "(Sorceress Only)", "(Barbarian Only)", "(Paladin Only)", "(Assassin Only)"]

    excluded_starts = ["Durability", "Required Strength",
                       "Required Dexterity", "Required Level",
                       "Quantity", "Unidentified", "Can be Inserted into Socketed Items",
                       "Keep in Inventory to Gain Bonus", "to Stength", "to Energy", "to mana", "Magic Damage", "Half Freeze Duration", "Relplenish Life", "Staff Class",
                       "Sword Class", "Javelin Class", "Axe Class", "Polearm Class", "Dagger Class", "Bow Class",
                       "Crossbow Class", "Regenerate Mana", "Throw Damage:", "One-Hand Damage", "Two-Hand Damage",
                       "Damage Reduced", "Poison Resist", "Replenish Life", "Level", "Attacker Takes Damage",
                       "Poison Length Reduced", "Mace Class", "Belt Size", "Slows Target", "Slower Stamina Drain", "Heal Stamina", "Enemy Light", "Throw Damage", "Tal rasha\'s", "Trang-Oul\'s"]
    sunders = ["cold rupture", "crack of the heavens", "flame rift", "rotting fissure", "the bone break", "the black cleft"]

    additional_exclusions = {
        "Harlequin Crest": ["All Skills", "Attributes", "Damaged Reduced", "50% Better", "Damage Reduced"],
        "Andariel\'s Visage": ["All Skills", "10% to Maximum Poison Resist", "Fire Resist", "Increased Attack"],
        "The Stone of Jordan": ["Increase Maximum Mana"],
        "Dwarf Star": ["Fire Absorb"],
        "Carrion Wind": ["Damage Taken Goes"],
        "The Oculus": ["Faster Cast Rate","Enhanced Defense", "Vitality", "All Resistances", "Better Chance"],
        "Eschuta\'s Temper": ["Fire Skill Damage", "Faster Cast Rate"],
        "Tal Rasha\'s Adjudication": ["Skill Levels", "Light Resist"],
        "Tal Rasha\'s Fine-Spun Cloth": ["Better Chance of", "Requirements"],
        "Arachnid Mesh": ["Increase Maximum Mana", "Faster Cast Rate"],
        "Snowclash": ["cold damage", "chilling armor", "blizzard", "glacial spike", "Maximum Cold", "Cold Absorb"],
        "Thundergod\'s Vigor": ["lightning damage", "lightning fury", "lightning strike", "Vitality", "Maximum Lightning","Lightning Absorb"],
        "Marrowwalk": ["Faster Run Walk", "skeleton mastery", "Dexterity"],
        "Sandstrom Trek": ["Faster Run Walk", "Faster Hit Recovery", "Vitality"],
        "Ormus\' Robes": ["Faster Cast Rate"],
        "Skin of the Vipermagi": ["Fast Cast Rate"],
        "Bloodfist": ["Increased Attack Speed", "Faster Hit Recovery", "to Minimum Damage", "to Life"],
        "Chance Guards": ["Attack Rating"],
        "Dracul\'s Grasp": ["Chance of Open Wounds", "Life after each Kill"],
        "Thunderstroke": ["lightning damage", "Lightning Bolt", "Enemy Light Resance", "Increased Attack Speed"],
        "The Stone of Jordan": ["Lightning Damage"]

    }

    required_stats = {
        "harlequin crest":["Defense"],
        "eschuta\'s temper": ["+3 to Sorceress Skill Levels",r'\+\d+% to Lightning Damage', "to Energy"]
    

        }

    with open(file_path, "r", encoding="utf-8") as file:
        lines = file.readlines()

        i = 0
        while i < len(lines):
            line = lines[i].strip()

            if re.match(r'\d{2}-\d{2}-\d{4} \d{2}:\d{2}:\d{2}(:\d{2})?:?', line):
                line_date_time = datetime.strptime(line.rstrip(':'), '%d-%m-%Y %H:%M:%S')
                item_name = lines[i + 1].strip()
                item_type = lines[i + 2].strip()
                stats = []

                if "Defense:" in item_type:
                    defense_stat = item_type.split("Defense:")[1].strip()
                    item_type = item_type.split("Defense:")[0].strip()
                    stats.append(f"Defense: {defense_stat}")

                if line_date_time < start_date_time:
                    i += 1
                    continue

                if "rune" in item_name.lower():
                    runes[item_name] += 1
                    i += 3
                    continue
                if "key of" in item_name.lower():
                    keys[item_name] += 1
                    i += 3                  
                    continue

                if any(essence in item_name for essence in ["Twisted Essence of Suffering", "Charged Essence of Hatred", "Festering Essence of Destruction", "Burning Essence of Terror"]):
                    i += 3
                    continue

                j = i + 3


                while j < len(lines) and not re.match(r'\d{2}-\d{2}-\d{4} \d{2}:\d{2}:\d{2}', lines[j]):
                    stat = lines[j].strip()

                    item_specific_exclusions = additional_exclusions.get(item_name, [])
                    item_specific_required_stats = required_stats.get(item_name.lower(), [])

                    item_name_lower = item_name.lower()
                    is_required_stat = contains_phrase(stat, item_specific_required_stats)

                    should_append_stat = not contains_phrase(stat, excluded_starts) and not contains_phrase(stat, item_specific_exclusions) and not contains_phrase(stat, excluded_exact_matches, exact_match=True)

                    if is_required_stat:
                        should_append_stat = True  # Required stats take priority over excluded stats

                    if should_append_stat:
                        stats.append(stat)

                    j += 1

##item name
                if re.search(r'(small shield|large shield|kite shield|tower shield|bone shield|spiked shield|round shield|dragon shield|ancient shield|grim shield|barbed shield|scutum|buckler|defender|pavise|heater|luna|hyperion|monarch|aegis|ward|troll nest|blade barrier|round shield)', item_name, re.IGNORECASE):
                    item_type = "Shields"
                if re.search(r'(small shield|large shield|kite shield|tower shield|bone shield|spiked shield|round shield|dragon shield|ancient shield|grim shield|barbed shield|scutum|buckler|defender|pavise|heater|luna|hyperion|monarch|aegis|ward|troll nest|blade barrier|round shield)', item_type, re.IGNORECASE):
                    item_type = "Shields"
                if re.search(r'(targe|rondache|heraldic shield|aerin shield|crown shield|protector shield|gilded shield|royal|shield|ancient shield|zakarum shield|vortex shield)', item_name, re.IGNORECASE):
                    item_type = "Pally Shields"
                if re.search(r'(bow)', item_name, re.IGNORECASE):
                    item_type = "Bows"
                if re.search(r'(rainbow facet)', item_type, re.IGNORECASE):
                    item_type = "Jewels"
                if re.search(r'(rainbow facet)', item_name, re.IGNORECASE):
                    item_type = "Jewels"
                if re.search(r'(javelin|pilum|short spear|glavie|throwing spear|simbilan|spiculum|harpoon|balrog spear)', item_name, re.IGNORECASE):
                    item_type = "Javelins"
                if re.search(r'(javelin|pilum|short spear|glavie|throwing spear|simbilan|spiculum|harpoon|balrog spear)', item_type, re.IGNORECASE):
                    item_type = "Javelins"
                if re.search(r'(ring)', item_type, re.IGNORECASE):
                    item_type = "Rings"
                if re.search(r'(amulet)', item_type, re.IGNORECASE):
                    item_type = "Amulets"
                if re.search(r'(spear|maiden spear|maiden pike|ceremonial spear|ceremonial pike|matriarchal spear|matriarchal pike|trident|brandistock|spetum|pike|fuscina|war fork|yari|lance|stygian pike|mancatcher|ghost spear|war pike)', item_name, re.IGNORECASE):
                    item_type = "Spears"
                if re.search(r'(spear|maiden spear|maiden pike|ceremonial spear|ceremonial pike|matriarchal spear|matriarchal pike|trident|brandistock|spetum|pike|fuscina|war fork|yari|lance|stygian pike|mancatcher|ghost spear|war pike)', item_type, re.IGNORECASE):
                    item_type = "Spears"
                if re.search(r'(axe|balanced axe|hatchet|cleaver|crowbill|naga|tabar|tomahawk|small crescent|decapitator|throwing axe|balanced axe|francisca|hurlbat|flying axe|winged axe)', item_name, re.IGNORECASE):
                    item_type = "Axes"
                if re.search(r'(axe|balanced axe|hatchet|cleaver|crowbill|naga|tabar|tomahawk|small crescent|decapitator|throwing axe|balanced axe|francisca|hurlbat|flying axe|winged axe)', item_type, re.IGNORECASE):
                    item_type = "Axes"
                if re.search(r'(sash|belt|coil|girdle)', item_name, re.IGNORECASE):
                    item_type = "Belts"
                if re.search(r'(boots|greaves)', item_name, re.IGNORECASE):
                    item_type = "Boots"
                if re.search(r'(boots|greaves)', item_type, re.IGNORECASE):
                    item_type = "Boots"
                if re.search(r'(circle|coronet|tiara|diadem)', item_name, re.IGNORECASE):
                    item_type = "Circlets"
                if re.search(r'(circle|coronet|tiara|diadem)', item_type, re.IGNORECASE):
                    item_type = "Circlets"
                if re.search(r'(club|cudgel)', item_name, re.IGNORECASE):
                    item_type = "Clubs"
                if re.search(r'(gloves|gauntlets|vambraces|mitts|bracers)', item_name, re.IGNORECASE):
                    item_type = "Gloves"
                if re.search(r'(gloves|gauntlets|vambraces|mitts|bracers)', item_type, re.IGNORECASE):
                    item_type = "Gloves"
                if re.search(r'(katar|wrist blade|hatchet hands|cestus|claws|blade talons|scissors katar|quhab|wrist spike|fascia|hand scythe|greater claws|greater talons|scissors quhab|suwayyah|wrist sword|war fist|battle cestus|feral claws|runic talons|scissors suwayyah)', item_name, re.IGNORECASE):
                    item_type = "Assassin"
                if re.search(r'(war hammer|maul|horadic malus|battle hammer|war club|martel de fer|legendary mallet)', item_name, re.IGNORECASE):
                    item_type = "Mauls"
                if re.search(r'(preserved head|zombie head|unraveller head|gargoyle head|demon head|mummified trophy|fetish trophy|sexton trophy|cantor trophy|heirophant trophy|minion skull|hellspawn skills|overseer skull|succubus skull|bloodlord skull)', item_name, re.IGNORECASE):
                    item_type = "Necro off-hand"
                if re.search(r'(cap|skull cap|helm|crown|mask|war hat|sallet|caque|basinet|winged helm|shako|hydraskull|armet|giant conch|corona|demonhead|bone visage)', item_name, re.IGNORECASE):
                    item_type = "Helmets"
                if re.search(r'(dagger|blade|dirk|kriss|decoy gidbinn|the gidbinn|poignard|rondel|cinquedeas|stilleto|bone knife|mithral point|fanged knife|legend spike|throwing knife|balanced knife|battle dart|war dart|flying knife|winged knife)', item_name, re.IGNORECASE):
                    item_type = "Knives"
                if re.search(r'(dagger|blade|dirk|kriss|decoy gidbinn|the gidbinn|poignard|rondel|cinquedeas|stilleto|bone knife|mithral point|fanged knife|legend spike|throwing knife|balanced knife|battle dart|war dart|flying knife|winged knife)', item_type, re.IGNORECASE):
                    item_type = "Knives"
                if re.search(r'(mace|morning star|flail|jagged star|knout|khalim|devil star|scourge)', item_name, re.IGNORECASE):
                    item_type = "Maces"
                if re.search(r'(orb|sacred globe|smoked sphere|jared\'s stone|crystalline globe|cloudy sphere|sparkling ball|swirling crystal|heavenly stone|eldritch orb|demon heart|vortex orb|dimensional shard)', item_name, re.IGNORECASE):
                    item_type = "Sorc orbs"
                if re.search(r'(antlers|wolf head|hawk helm|antlers|falcon mask|spirit mask|alpha helm|griffon headress|hunter\'s guise|sacred feathers|totemic mask|blood spirit|sun spirit|earth spirit|sky spirit|dream spirit)', item_name, re.IGNORECASE):
                    item_type = "Druid helms"
                if re.search(r'(antlers|wolf head|hawk helm|antlers|falcon mask|spirit mask|alpha helm|griffon headress|hunter\'s guise|sacred feathers|totemic mask|blood spirit|sun spirit|earth spirit|sky spirit|dream spirit)', item_type, re.IGNORECASE):
                    item_type = "Druid helms"
                if re.search(r'(jawbone cap|fanged cap|horned helm|assault helmet|avenger guard|jawbone visor|lion helm|rage mask|savage helmet|slayer guard|carnage helm|fury visor|destroyer helm|conqueror crown|guardian crown)', item_name, re.IGNORECASE):
                    item_type = "Barb helms"
                if re.search(r'(jawbone cap|fanged cap|horned helm|assault helmet|avenger guard|jawbone visor|lion helm|rage mask|savage helmet|slayer guard|carnage helm|fury visor|destroyer helm|conqueror crown|guardian crown)', item_type, re.IGNORECASE):
                    item_type = "Barb helms"
                if re.search(r'(bardiche|voulge|scythe|poleaxe|halbred|war scythe|lochaber axe|bill|battle sycthe|partizan|bec-de-corbin|grim scythe|orge axe|colossus voulge|thresher|cryptic axe|great poleaxe|giant thresher)', item_name, re.IGNORECASE):
                    item_type = "Poles / Threshers"
                if re.search(r'(scepter|seraph rod|caduceus|holy water sprinkler)', item_name, re.IGNORECASE):
                    item_type = "Scepters"
                if re.search(r'(short staff|long staff|gnarled staff|battle staff|war staff|horadic staff|staff of kings|jo staff|quarterstaff|cedar staff|gothic staff|rune staff|walking stick|stalagmite|elder staff|shillelagh|archon staff)', item_name, re.IGNORECASE):
                    item_type = "Staffs"
                if re.search(r'(short staff|long staff|gnarled staff|battle staff|war staff|horadic staff|staff of kings|jo staff|quarterstaff|cedar staff|gothic staff|rune staff|walking stick|stalagmite|elder staff|shillelagh|archon staff)', item_type, re.IGNORECASE):
                    item_type = "Staffs"
                if re.search(r'(short sword|scimitar|saber|falchion|crystal sword|broad sword|long sword|war sword|tow-handed sword|claymore|giant sword|bastard sword|flamberge|great sword|gladius|cutlass|shamshir|tulwar|dimensional blade|battle sword|rune sword|ancient sword|espandon|daciaan falx|tusk sword|gothic sword|zweihander|executioner sword|falcata|ataghan|elegant blade|hydra edge|phase blade|conquest sword|cryptic sword|mythical sword|legend sword|highland blade|balrog blade|champion sword|colossal sword|colossus blade)', item_name, re.IGNORECASE):
                    item_type = "Swords"
                if re.search(r'(short sword|scimitar|saber|falchion|crystal sword|broad sword|long sword|war sword|tow-handed sword|claymore|giant sword|bastard sword|flamberge|great sword|gladius|cutlass|shamshir|tulwar|dimensional blade|battle sword|rune sword|ancient sword|espandon|daciaan falx|tusk sword|gothic sword|zweihander|executioner sword|falcata|ataghan|elegant blade|hydra edge|phase blade|conquest sword|cryptic sword|mythical sword|legend sword|highland blade|balrog blade|champion sword|colossal sword|colossus blade)', item_type, re.IGNORECASE):
                    item_type = "Swords"
                if re.search(r'(quilted armor|leather armor|chaos armor|hard leather armor|studded leather|ring mail|scale mail|chain mail|breast plate|splint mail|plate mail|field plate|gothic plate|full plate mail|ancient armor|light plate|ghost armor|sepenskin armor|demonhide armor|trellised armor|linked mail|tigulated mail|mesh armor|cuirass|russet armor|templar coat|sharktooth armor|embossed plate|choas armor|ornate armor|mage plate|dusk shroud|wyrmhide|scarab husk|wire fleece|diamond mail|loricated mail|boneweave|great hauberk|balrog skin|hellforge plate|kraken shell|lacquered plate|shadow plate|sacred armor|archon plate)', item_name, re.IGNORECASE):
                    item_type = "Armors"
                if re.search(r'(wand)', item_name, re.IGNORECASE):
                    item_type = "Wands"
                if re.search(r'(crossbow|arbalest|ballista|chu-ko-nu|pellet bow)', item_name, re.IGNORECASE):
                    item_type = "Cross bows"

## uniques
                if re.search(r'(blinkbat\'s form|boneflesh|darkglow|goldskin|greyform|hawkmail|heavenly garb|iceblink|rattlecage|rockfleece|silks of the victor|sparking mail|the centurion|twitchthroe|venom ward|atma\'s wail|black hades|corpsemourn|crow caw|duriel\'s shell|guardian angel|iron pelt|que-hegan\'s wisdom|shaftstop|skin of the flayed one|skin of the vipermagi|skullder\'s ire|spirit forge|the spirit shroud|toothrow|arkaine\'s valor|leviathan|ormus\' robe|steel carapace|templar\'s might|the gladiator\'s bane|tyrael\'s might)', item_name, re.IGNORECASE):
                    item_type = "Unique Chest"
                if re.search(r'(bladebuckle|goldwrap|lenymo|nightsmoke|snakecord|gloom\'s trap|razortail|snowclash|string of ears|thundergod\'s vigor|arachnid mesh|nosferatu\'s coil|verdungo\'s hearty cord)', item_name, re.IGNORECASE):
                    item_type = "Unique Belts"
                if re.search(r'(goblin toe|gorefoot|hotsput|tearhaunch|treads of cthon|gore rider|infernostride|silkweave|war traveler|waterwalk|marrowwalk|sandstorm trek|shadow dancer)', item_name, re.IGNORECASE):
                    item_type = "Unique Boots"
                if re.search(r'(Kira\'s guardian|griffon\'s eye)', item_name, re.IGNORECASE):
                    item_type = "Unique Helms"
                if re.search(r'(bloodfist|chance guards|frostburn|magefist|the hand of broc|ghouldhide|gravepalm|hellmouth|lava gout|venom grip|dracul\'s grasp|soul drainer|steelrend)', item_name, re.IGNORECASE):
                    item_type = "Unique Gloves"
                if re.search(r'(tal rasha\'s)', item_name, re.IGNORECASE):
                    item_type = "Set items"
                if re.search(r'(biggin\'s bonnet|coif of glory|duskdeep|howltusk|tarnhelm|the face of horror|undead crown|wormskull|blackhorn\'s face|crown of thieves|darksight helm|peasant crown|rockstopper|stealskull|valkyrie wing|vampire gaze|andariel\'s visage|crown of ages|giant skull|harlequin crest|nightwing\'s veil|steel shade|veil of steel|arreat\'s face|jalal\'s mane|cereus\' bite|demonhorn\'s edge|halaberd\'s reign|ravenlore|spirit keeper|wolfhowl)', item_name, re.IGNORECASE):
                    item_type = "Unique Helms"
                if re.search(r'(blastbark|hellclap|pluckeye|raven claw|rouge\'s bow|stormstrike|witherstring|wizendraw|cliffkiller|endlesshail|goldstrike arch|kuko shakaku|magewrath|riphook|skystrike|witchwild string|eaglehorn|widowmaker|windforce)', item_name, re.IGNORECASE):
                    item_type = "Unique Bows"
                if re.search(r'(bladebone|deathspade|rakescar|skull splitter|the gnasher|butcher\'s pupil|coldkill|guardian naga|islestrike|pompeii\'s wrath|cranebeak|death cleaver|razor\'s edge|rune master|Aze of fechmar|brainhew|goreshovel|humongous|the chieftain|boneslayer blade|spellsteel|stromrider|the minotaur|warlord\'s trust|ethereal edge|executioner\'s justice|hellslaryer|messerschmidt\'s reaver)', item_name, re.IGNORECASE):
                    item_type = "Unique axes"
                if re.search(r'(aldur\'s|angelic wings|angelic mantle|angelic halo|angelic sickle|arcanna\'s|Arctic furs|artic binding|artic horn|artic mitts| berserker\'s|bul-katho\'s|cathan\'s|civerb\'s|cleglaw\'s|cow king\'s|death\'s|griswold\'s|haemosu\'s|dangoon\'s|ondal\'s|taebaek\'s|hsarus\'|hwanin\'s|immortal king\'s|infernal sign|infernal cranium|infernal torch|iratha\'s|isenhart\'s|m\'avina\'s|milabrega\'s|naj\'s|natalya\'s|wilhelm\'s|magnus\'|guillaume\'s|whitstan\'s|sander\'s|sazabi\'s|sigon\'s|tancred\'s|telling of beads|dark adherenet|credendum|rite of passage|laying of hands|trang-oul\'s|vidala\'s)', item_name, re.IGNORECASE):
                    item_type = "Set items"
                if re.search(r'(atma\'s scarab|crescent moon|highlord\'s wrath|mara\'s kaleidoscope|metalgrid|nokozan relic|saracen\'s chance|seraph\'s hymn|the cat\'s eye|the eye of etlich|the mahim-oak curio|the rising sun)', item_name, re.IGNORECASE):
                    item_type = "Unique Ammy"
                if re.search(r'(bul-katho\'s wedding band|carrion wind|dwarf star|manald heal|nagelring|nature\'s peace|raven frost|stone of jordan|wisp projector)', item_name, re.IGNORECASE):
                    item_type = "Unique rings"
                if re.search(r'(bverrit keep|pelta lunata|steelclash|stormguild|swordback hold|the ward|umbral disk|wall of the eyeless|gerke\'s sanctuary|lance guard|lidless wall|moser\'s blessed circle|radament\'s spheree|stormchaser|tiamat\'s rebuke|visceratuant|blackoak shield|head hunter\'s glory|medusa\'s gaze|spike thorn|spirit ward|stormshield|herald of zakarum|homunculus|alma negra|boneflame|darkforce spawn|dragonscale)', item_name, re.IGNORECASE):
                    item_type = "Unique Shields"
                if re.search(r'(lycander\'s aim|blood raven\'s charge|doomslinger|hellcast|ichorsting|leadcrow|buriza-do kyanon|demon machine|langer briser|pus spitter|gut siphon|hellrack)', item_name, re.IGNORECASE):
                    item_type = "Unique Bows and Crossbows"
                if re.search(r'(Bloodrise|Crushflange|Felloak|Ironstone|Stoutnail|The General\'s Tan Do Li Ga|Baezil\'s Vortex|Dark Clan Crusher|Earthshaker|Fleshrender|Moonfall|Sureshrill Frost|Baranar\'s Star|Demon Limb|Horizon\'s Tornado|Nord\'s Tenderizer|Schaefer\'s Hammer|Stone Crusher|Stormlash|Bonesnap|Steeldriver|Bloodtree Stump|The Gavel of Pain|Earth Shifter|The Cranium Basher|Windhammer|Knell Striker|Rusthandle|Stormeye|Hand of Blessed Light|The Fetid Sprinkler|Zakarum\'s Hand|Astreon\'s Iron Ward|Heaven\'s Light|The Redeemer)', item_name, re.IGNORECASE):
                    item_type = "Clubs and Scepters"
                if re.search(r'(Arioc\'s Needle|Athena\'s Wrath|Azurewrath|Bane Ash|Bartuc\'s Cut-Throat|Bing Sz Wang|Blackbog\'s Sharp|Blackleach Blade|Blacktongue|Blade of Ali Baba|Blood Crescent|Bloodletter|Bloodmoon|Bloodthief|Bonehew|Chromatic Ire|Cloudcrack|Coldsteel Eye|Crainte Vomir|Culwen\'s Point|Deathbit|Demon\'s Arch|Dimoak\'s Hew|Djinn Slayer|Doombringer|Firelizard\'s Talons|Flamebellow|Fleshripper|Frostwind|Gargoyle\'s Bite|Ghostflame|Gimmershred|Ginther\'s Rift|Gleamscythe|Grim\'s Burning Dead|Griswold\'s Edge|Gull|Headstriker|Heart Carver|Hellplague|Hexfire|Hone Sundan|Husoldal Evo|Jade Talon|Kelpie Snare|Kinemil\'s Awl|Lacerator|Lance of Yaggai|Lightsabre|Lycander\'s Flank|Mang Song\'s Lesson|Ondal\'s Wisdom|Pierre Tombale Couant|Plague Bearer|Razorswitch|Razortine|Ribcracker|Ripsaw|Rixot\'s Keen|Serpent Lord|Shadow Killer|Shadowfang|Skewer of Krintiz|Skull Collector|Soul Harvest|Soulfeast Tine|Soulflay|Spectral Shard|Spineripper|Spire of Honor|Spire of Lazarus|Steel Pillar|Steelgoad|Stoneraven|Stormspike|Stormspire|Swordguard|The Atlantean|The Battlebranch|The Diggler|The Dragon Chang|The Grandfather|The Grim Reaper|The Impaler|The Iron Jang Bong|The Jade Tan Do|The Meat Scraper|The Patriarch|The Reaper\'s Toll|The Salamander|The Scalper|The Tannr Gorerod|The Vile Husk|Thunderstroke|Titan\'s Revenge|Todesfaelle Flamme|Tomb Reaver|Viperfork|Warpspear|Warshrike|Wizardspike|Woestave|Wraith Flight)', item_name, re.IGNORECASE):
                    item_type = "Unique Weapons"
                if re.search(r'(the oculus|death\'s fathom|eschuta\'s temper)', item_name, re.IGNORECASE):
                    item_type = "Unique Sorc Orbs"
                if re.search(r'(gravenspin|maelstorm|torch of iro|ume\'s lament|arm of king leoric|blackhand key|carin shard|suicide branch|boneshade|death\'s web)', item_name, re.IGNORECASE):
                    item_type = "Unique Wands"
                if "harlequin crest" in item_name.lower():
                    item_name = item_name.replace("Harlequin Crest", "Shako")
                if "the stone of jordan" in item_name.lower():
                    item_name = item_name.replace("The Stone of Jordan", "SoJ")
                if "bul-lathos\' wedding band" in item_name.lower():
                    item_name = item_name.replace("Bul-Kathos\' Wedding Band", "BK")
                if "hundergod\'s vigor" in item_name.lower():
                    item_name = item_name.replace("Thundergod\'s Vigor", "T-God\'s")
                if "skin of the vipermagi" in item_name.lower():
                    item_name = item_name.replace("Skin of the Vipermagi", "Vipermagis")
                if "andariel\'s visage" in item_name.lower():
                    item_name = item_name.replace("Andariel\'s Visage", "Andys")
                if "the oculus" in item_name.lower():
                    item_name = item_name.replace("The Oculus", "Occy")
                

##charms                
                if "grand charm" in item_name.lower():
                    item_type = "Grand Charm"
                if "small charm" in item_name.lower():
                    item_type = "Small Charm"
                if "large charm" in item_name.lower():
                    item_type = "Large Charm"
                if re.search(r'(cold rupture|crack of the heavens|flame rift|rotting fissure|the bone break|the black cleft)', item_name, re.IGNORECASE):
                    item_type = "Sunder Charms"
                item = {"name": f"{item_name}", "type": item_type, "stats": stats}
                #items[item_type].append(item)
            
                
                item_list = items[item_type]
                insert_index = 0
                for existing_item in item_list:
                    if (item_type.lower().startswith("unique") and existing_item["type"].lower().startswith("unique")) or item["name"].lower() > existing_item["name"].lower():
                        break
                    insert_index += 1

                item_list.insert(insert_index, item)

                i = j
            else:
                i += 1
    sorted_items = defaultdict(list)
    for item_type in sorted(items.keys()):
        sorted_items[item_type] = sorted(items[item_type], key=lambda x: x["name"].lower())

                
    return sorted_items, runes, keys


def merge_looted_logs(looted_logs):
    merged_contents = ""
    for file_path in looted_logs:
        with open(file_path, "r", encoding="utf8") as f:
            file_contents = f.read()
            merged_contents += file_contents
    return merged_contents

def browse_file(file_path_entry, date_combobox, output_text):
    folder_path = filedialog.askdirectory()
    file_path_entry.delete(0, tk.END)
    file_path_entry.insert(0, folder_path)
    
    looted_logs = []
    for root, _, files in os.walk(folder_path):
        for file in files:
            if file.lower() == "looted.log":
                looted_logs.append(os.path.join(root, file))

    if not looted_logs:
        messagebox.showerror("Error", "No looted.log files found")
        return

    merged_content = merge_looted_logs(looted_logs)
    merged_file_path = os.path.join(folder_path, "merged_looted.log")
    with open(merged_file_path, "w", encoding="utf-8") as merged_file:
        for looted_log_path in looted_logs:
            with open(looted_log_path, "r", encoding="utf-8") as looted_log_file:
                merged_file.write(looted_log_file.read())

    start_date_time = date_combobox.get()
    start_date_time = datetime.strptime(start_date_time, format)

    try:
        sorted_items, runes, keys = analyze_file(merged_file_path, start_date_time)
        formatted_items = format_items(sorted_items)
        formatted_runes = [f"{key}: {value}" for key, value in runes.items()]
        formatted_keys = [f"{key}: {value}" for key, value in keys.items()]
        formatted_list = formatted_items + ["\nRunes:"] + formatted_runes + ["\nKeys:"] + formatted_keys

        output_text.delete("1.0", tk.END)
        output_text.insert(tk.END, "\n".join(formatted_list) + "\n")


    except Exception as e:
        error = str(e)
        with open('error.log', 'w') as f:
            print(error, file=f)
        messagebox.showerror("Error", str(e))
        return folder_path
    pass 

def run_script(folder_path, date_combobox, output_text):
    folder_path = folder_path.get()
    if not folder_path:
        messagebox.showerror("Error", "No file selected")
        return


    looted_logs = []
    for root, _, files in os.walk(folder_path):
        for file in files:
            if file.lower() == "looted.log":
                looted_logs.append(os.path.join(root, file))

    if not looted_logs:
        messagebox.showerror("Error", "No looted.log files found")
        return
    merged_content = merge_looted_logs(looted_logs)
    merged_file_path = os.path.join(folder_path, "merged_looted.log")
    with open(merged_file_path, "w", encoding="utf-8") as merged_file:
        for looted_log_path in looted_logs:
            with open(looted_log_path, "r", encoding="utf-8") as looted_log_file:
                merged_file.write(looted_log_file.read())

    start_date_time = date_combobox.get()
    start_date_time = datetime.strptime(start_date_time, format)

    try:
        sorted_items, runes, keys = analyze_file(merged_file_path, start_date_time)
        formatted_items = format_items(sorted_items)
        formatted_runes = [f"{key}: {value}" for key, value in runes.items()]
        formatted_keys = [f"{key}: {value}" for key, value in keys.items()]
        formatted_list = formatted_items + ["\nRunes:"] + formatted_runes + ["\nKeys:"] + formatted_keys

        output_text.delete("1.0", tk.END)
        output_text.insert(tk.END, "\n".join(formatted_list) + "\n")


    except Exception as e:
        error = str(e)
        with open('error.log', 'w') as f:
            print(error, file=f)
        messagebox.showerror("Error", str(e))
        return


def format_items(sorted_items):
    classes = ["barbarian", "sorceress", "amazon", "assassin","paladin", "necromancer", "druid"]
    formatted_items = []
    for item_type, item_list in sorted_items.items():
        formatted_items.append(f"[B]{item_type}:[/B]")
        for item in item_list:
            ethereal_prefix = ""
            stats = []
            is_charm = "charm" in item["name"].lower() or "charm" in item_type.lower()
                
            for stat in item["stats"]:

                if "3 to sorceress skill levels" in stat.lower():
                    stat = stat.replace("3 to Sorceress Skill Levels", "3 Sorc Skills")

                if "defense" in stat.lower():
                    stat = stat.replace("Defense", "Def")
                if "life leach" in stat.lower():
                    stat = stat.replace("Life Leach", "LL")
                if "ethereal (cannot be repaired)" in stat.lower():
                    stat = stat.replace("Ethereal (Cannot be Repaired)", "eth")
                if "increased attack speed" in stat.lower():
                    stat = stat.replace("Increased Attack Speed", "IAS")
                if "+" in stat.lower():
                    stat = stat.replace("+", "+")
                for cls in classes:
                    class_only_text = f" ({cls} only)"
                    if class_only_text.lower() in stat.lower():
                        stat = stat.lower().replace(class_only_text.lower(), "")
                        break
                if re.search(r'\d+% Chance to cast', stat, re.IGNORECASE):
                    continue
                if re.search(r'\d+ Maximum Stamina', stat, re.IGNORECASE):
                    continue
                if re.search(r'\d+% Damage to Undead', stat, re.IGNORECASE):
                    continue
                if re.search(r'1 to All Skills', stat, re.IGNORECASE):
                    continue
                if re.search(r'Monster Cold Immunity is Sundered', stat, re.IGNORECASE):
                    continue
                if re.search(r'Monster Lightning Immunity is Sundered', stat, re.IGNORECASE):
                    continue
                if re.search(r'Monster Fire Immunity is Sundered', stat, re.IGNORECASE):
                    continue
                if "faster run/walk" in stat.lower():
                    stat = stat.replace("Faster Run/Walk", "FRW")
                if "faster cast rate" in stat.lower():
                    stat = stat.replace("Faster Cast Rate", "FCR")
                if "to attack rating" in stat.lower():
                    stat = stat.replace("to Attack Rating", "AR")
                if "faster block rate" in stat.lower():
                    stat = stat.replace("Faster Block Rate", "FBR")
                if "faster hit recovery" in stat.lower():
                    stat = stat.replace("Faster Hit Recovery", "FHR")
                if "enhanced def" in stat.lower():
                    stat = stat.replace("Enhanced Def", "ED")
                if "enhanced damage" in stat.lower():
                    stat = stat.replace("Enhanced Damage", "ED")
                if "maximum damage" in stat.lower():
                    stat = stat.replace("Maximum Damage", "Max Dmg")
                if "minimum damage" in stat.lower():
                    stat = stat.replace("Minimum Damage", "Min Dmg")
                if "socketed" in stat.lower():
                    stat = stat.replace("Socketed", "0s")
                if "to battle orders" in stat.lower():
                    stat = stat.replace("to battle orders", "to BO")
                if "to war cry" in stat.lower():
                    stat = stat.replace("to war cry", "to WC")
                if "to poison and bone skills" in stat.lower():
                    stat = stat.replace("to poison and bone skills", "to PnB skills")
                if "to Attributes" in stat.lower():
                    stat = stat.replace("to Attributes", "to stats")
                if "to lightning skills" in stat.lower():
                    stat = stat.replace("to ligntning skills", "to light skills")
                if "necromancer skill levels" in stat.lower():
                    stat = stat.replace("Necromancer Skill Levels", "Necro Skills")
                if "javelin and spear skills" in stat.lower():
                    stat = stat.replace("javelin and spear skills", "Java Skills")
                if "assassin skill levels" in stat.lower():
                    stat = stat.replace("Assassin Skill Levels", "Sin Skills")
                if "barbarian skill levels" in stat.lower():
                    stat = stat.replace("Barbarian Skill Levels", "Barb Skills")
                if "sorcercess skill levels" in stat.lower():
                    stat = stat.replace("Sorceress Skill Levels", "Sorc Skills")
                if "paladin skill levels" in stat.lower():
                    stat = stat.replace("Paladin Skill Levels", "Pally Skills")
                if "druid skill levels" in stat.lower():
                    stat = stat.replace("Druid Skill Levels", "Dru Skills")
                if "amazon skill levels" in stat.lower():
                    stat = stat.replace("Amazon Skill Levels", "Zon Skills")
                if "bow and crossbow skills" in stat.lower():
                    stat = stat.replace("bow and crossbow skills", "Bow Skills")
                if "elemental skills" in stat.lower():
                    stat = stat.replace("elemental skills", "Ele Skills")
                if "sorcercess skill levels" in stat.lower():
                    stat = stat.replace("Sorceress Skill Levels", "Sorc Skills")
                if "(based on character level)" in stat.lower():
                    stat = stat.replace("(Based on Character Level)", "based on clvl")
                if "life stolen per hit" in stat.lower():
                    stat = stat.replace("Life stolen per hit", "LL")
                if "mana stolen per hit" in stat.lower():
                    stat = stat.replace("Mana stolen per hit", "ML")
                if "cold resist" in stat.lower():
                    stat = stat.replace("Cold Resist", "Cold Res")
                if "lightning resist" in stat.lower():
                    stat = stat.replace("Lightning Resist", "Light Res")
                if "all resistances" in stat.lower():
                    stat = stat.replace("All Resistances", "All Res")
                if "all attributes" in stat.lower():
                    stat = stat.replace("all Attributes", "Attributes")
                if "fire resist" in stat.lower():
                    stat = stat.replace("Fire Resist", "Fire Res")
                if "+" in stat.lower():
                    stat = stat.replace("+", "")
                if "adds" in stat.lower():
                    stat = stat.replace("Adds", "")
                if "dexterity" in stat.lower():
                    stat = stat.replace("Dexterity", "Dex")
                if "poison" in stat.lower():
                    stat = stat.replace("poison", "psn")

                if "increase maximum durability" in stat.lower():
                    stat = stat.replace("Increase Maximum Durability", "Increased Durability")
                if "enemy poison resistance" in stat.lower():
                    stat = stat.replace("Enemy Poison Resistance", "PSN Res")
                if "poison skill damage" in stat.lower():
                    stat = stat.replace("Poison Skill Damage", "PSN Dmg")
            
                if "better chance of getting magic items" in stat.lower():
                    stat = stat.replace("Better Chance of Getting Magic Items", "MF")
                if re.search(r'repairs 1 durability in \d+ seconds', stat.lower()):
                    stat = "Repairs"
                if "extra gold from monsters" in stat.lower():
                    continue
                if "chance to block:" in stat.lower():
                    continue
                if "very slow attack speed" in stat.lower():
                    continue
                if re.search(r'\d+ to light radius', stat.lower()):
                    continue
                if re.search(r'adds', stat.lower()) and not is_charm:
                    continue
                if re.search(r'\d+ to dexterity', stat.lower()) and not is_charm:
                    continue
                #if re.search(r'\d+ to energy', stat.lower()) and not is_charm:
                    #continue
                if re.search(r'\d+ poison damage over', stat.lower()) and not is_charm:
                    continue
                if re.search(r'\d+ to strength', stat.lower()):
                    continue
                if re.search(r'\d+ to mana', stat.lower()):
                    continue
                toLife = re.search(r'(\d+) to life', stat.lower())
                if toLife and int(toLife.group(1)) <= 60 and not is_charm:
                    continue
                if "ethereal" in stat.lower() or "eth" in stat.lower():
                    ethereal_prefix = "(ETH) "
                else:
                    stats.append(stat)
            item_line = "    " + ethereal_prefix + item["name"] + " - FG:"

            formatted_items.append(item_line)
            formatted_stats = " | ".join(stats)
            formatted_stats = formatted_stats.rstrip(" | ")  # Remove the trailing '|'
            formatted_stats = formatted_stats.lstrip(" | ")
            formatted_items.append("    " + formatted_stats)
            formatted_items.append('')
    return formatted_items




def save_output(output_text):
    output = output_text.get("1.0", tk.END)
    if not output.strip():
        messagebox.showerror("Error", "No output to save")
        return

    save_path = filedialog.asksaveasfilename(title="Save output file", defaultextension=".txt", filetypes=[("Text File", "*.txt")])
    if save_path:
        with open(save_path, "w", encoding="utf-8") as f:
            f.write(output)

def create_license_validation_window(main_app, main_frame, notebook, output_text):
    def on_enter_key(event):
        validate_license_key(license_entry, main_frame, license_window, output_text)


    license_window = tk.Toplevel(main_app)
    license_window.title("License Validation")
    license_window.geometry("450x200")
    license_window.minsize(400, 200)

    screen_width = license_window.winfo_screenwidth()
    screen_height = license_window.winfo_screenheight()

    x_coordinate = int((screen_width / 2) - (450 / 2))
    y_coordinate = int((screen_height / 2) - (150 / 2))

    license_window.geometry(f"450x150+{x_coordinate}+{y_coordinate}")

    main_container = ttk.Frame(license_window)
    main_container.pack(expand=True, anchor='center')

    license_frame = ttk.Frame(main_container)
    license_frame.pack(pady=10)

    ttk.Label(license_frame, text="License/Key:").grid(row=0, column=0, padx=10, pady=10)
    license_entry = ttk.Entry(license_frame)
    license_entry.grid(row=0, column=1, padx=10, pady=10)
    license_entry.bind("<Return>", on_enter_key)
    
    button_frame = ttk.Frame(main_container)
    button_frame.pack(pady=10)

    validate_button = ttk.Button(button_frame, text="Validate", command=lambda: validate_license_key(license_entry, main_frame, license_window, output_text))
    validate_button.pack(side='left', padx=10)

    purchase_key_button = ttk.Button(button_frame, text="Purchase Key", command=lambda: webbrowser.open("https://bozknight.mysellix.io/en-en/"))
    purchase_key_button.pack(side='left', padx=10)
    #sv_ttk.set_theme('dark')
    license_window.mainloop()
    return license_entry

def find_text(event=None):
    def search_keyword():
        nonlocal current_index
        keyword = keyword_entry.get()
        if keyword:
            # Remove highlight from the previous item
            if current_index:
                output_text.tag_remove("highlight", current_index, f"{current_index}+{len(keyword)}c")
                current_index = output_text.search(keyword, current_index+"+1c", stopindex=tk.END, nocase=1)
            else:
                current_index = output_text.search(keyword, "1.0", stopindex=tk.END, nocase=1)

            if current_index:
                output_text.tag_configure("highlight", background="yellow")
                output_text.tag_remove("highlight", "1.0", tk.END)
                output_text.tag_add("highlight", current_index, f"{current_index}+{len(keyword)}c")
                output_text.see(current_index)
            else:
                messagebox.showinfo("Find", "No more occurrences found")

    def close_dialog(event=None):
        remove_highlight()
        find_dialog.destroy()

    def remove_highlight():
        output_text.tag_remove("highlight", "1.0", tk.END)

    current_index = None

    find_dialog = tk.Toplevel(main_app)
    find_dialog.title("Find Text")
    find_dialog.geometry("300x150")
    find_dialog.protocol("WM_DELETE_WINDOW", close_dialog)
    find_dialog.minsize(300, 150)

    screen_width = find_dialog.winfo_screenwidth()
    screen_height = find_dialog.winfo_screenheight()
    x_coordinate = int((screen_width / 2) - (300 / 2))
    y_coordinate = int((screen_height / 2) - (150 / 2))
    find_dialog.geometry(f"300x150+{x_coordinate}+{y_coordinate}")

    keyword_label = tk.Label(find_dialog, text="Enter text to find:")
    keyword_label.grid(row=0, column=0, padx=10, pady=10, sticky="w")

    keyword_entry = tk.Entry(find_dialog)
    keyword_entry.grid(row=1, column=0, padx=10, pady=10, sticky="w")

    find_button = tk.Button(find_dialog, text="Next", command=search_keyword)
    find_button.grid(row=2, column=0, padx=10, pady=10, sticky="w")

    keyword_entry.focus_set()

    find_dialog.bind("<Return>", lambda event: search_keyword())
    find_dialog.bind("<Escape>", close_dialog)


def copy_text(event=None):
    output_text.event_generate("<<Copy>>")

def paste_text(event=None):
    output_text.event_generate("<<Paste>>")
    


def create_main_app_window():
    main_app = tk.Tk()
    main_app.title("Bozzys Analyzer")
    main_app.geometry("800x600")
    main_app.minsize(800, 600)
    style = ttkthemes.ThemedStyle()
    style.set_theme("arc")

    screen_width = main_app.winfo_screenwidth()
    screen_height = main_app.winfo_screenheight()
    x_coordinate = int((screen_width / 2) - (800 / 2))
    y_coordinate = int((screen_height / 2) - (600 / 2))
    main_app.geometry(f"800x600+{x_coordinate}+{y_coordinate}")


    notebook = ttk.Notebook(main_app)
    notebook.pack(fill="both", expand=True)

    license_frame = ttk.Frame(notebook)
    main_frame = ttk.Frame(notebook)

    notebook.add(main_frame, text="Main")

    left_frame = ttk.Frame(main_frame)
    left_frame.pack(side="left", fill="y", padx=(10, 0), pady=10)

    right_frame = ttk.Frame(main_frame)
    right_frame.pack(side="right", fill="both", expand=True, padx=(0, 10), pady=10)

    output_text = tk.Text(right_frame, wrap=tk.WORD)
    output_text.pack(expand=True, fill=tk.BOTH, side="left")
    # Bind keyboard shortcuts
    output_text.bind("<Control-f>", find_text)
    output_text.bind("<Control-c>", copy_text)
    output_text.bind("<Control-v>", paste_text)
    output_text.config(wrap="none")


    scrollbar = ttk.Scrollbar(right_frame, orient="vertical", command=output_text.yview)
    scrollbar.pack(side="right", fill="y")
    output_text.config(yscrollcommand=scrollbar.set)

    file_path_entry = ttk.Entry(left_frame)
    file_path_entry.pack(pady=(0, 10))

    ttk.Label(left_frame, text="Select Date & Time:").pack(pady=10)
    date_combobox = ttk.Combobox(left_frame, state="normal")
    date_combobox.pack(pady=10)
    date_combobox.set("04-04-2023 00:00:00")


    browse_button = tk.Button(left_frame, text="Select Looted Folder", command=lambda: browse_file(file_path_entry, date_combobox, output_text))
    browse_button.pack(pady=(0, 10))

    run_button = tk.Button(left_frame, text="Run Script", command=lambda: run_script(file_path_entry, date_combobox, output_text))
    run_button.pack(pady=10)

    save_button = tk.Button(left_frame, text="Save Output", command=lambda: save_output(output_text))
    save_button.pack(pady=10)

    ttk.Label(left_frame, text="The program will create a \n Merged Loot text document \n in the same directoy.").pack(pady=10)




    main_app.withdraw()
    return main_app, main_frame, notebook, output_text



if __name__ == "__main__":
    main_app, main_frame, notebook, output_text = create_main_app_window()
    create_license_validation_window(main_app, main_frame, notebook, output_text)
    main_app.mainloop()
    main()
